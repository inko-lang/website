# Generic data types
type Stack[T] {
  let @values: Array[T]

  fn static new -> Self {
    Stack([])
  }

  fn mut push(value: T) {
    @values.push(value)
  }

  fn mut pop -> Option[T] {
    @values.pop
  }
}

type async Main {
  fn async main {
    let stack = Stack.new

    # This infers `T` to `Int`.
    stack.push(42)

    # This is an error, as `T` is inferred to `Int`, and
    # `String` isn't compatible with `Int`.
    stack.push('Oh no!')

    # The compiler can also infer earlier types based
    # on how they are used later on:
    let stack = Stack.new
    let value = stack.pop # The exact type isn't known yet

    10 + value.get # `value` inferred as `Option[Int]`
  }
}
