# Concurrent programming
import std.sync (Future, Promise)

type async Calculator {
  fn async fact(size: Int, promise: uni Promise[Int]) {
    let result = 1
      .to(size)
      .iter
      .reduce(1, fn (product, val) { product * val })

    promise.set(result)
  }
}

type async Main {
  fn async main {
    let calc = Calculator()

    # This calculates the factorial of 15 in the
    # background, then we wait for the result to
    # be sent back to us via a channel.
    match Future.new {
      case (future, promise) -> {
        calc.fact(15, promise)
        future.get # => 1307674368000
      }
    }
  }
}
