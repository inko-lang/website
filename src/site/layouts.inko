import builder.html
import builder.xml
import markdown.html.(Filter, TableOfContents)
import site.examples.Example
import site.packages.Package
import site.sponsors.(CorporateSponsor, Sponsor)
import std.fs.file.ReadOnlyFile
import std.io.BufferedReader
import wobsite.(Files, Page)
import wobsite.markdown.(Admonitions, SyntaxHighlight)
import wobsite.time.(human_readable_date, iso_date)

# The base URL of the website.
let URL = 'https://inko-lang.org'

# The main title of the website, used for the Atom feed.
let TITLE = 'The Inko programming language'

# The buttons to display in the jumbotron on the homepage.
let BUTTONS = [
  [
    'Get started',
    'icon-rocket',
    'green',
    'https://docs.inko-lang.org/manual/main/setup/installation/'
  ],
  ['Discord', 'icon-discord', 'purple', 'https://discord.gg/seeURxHxCb'],
  ['GitHub', 'icon-github', '', 'https://github.com/inko-lang/inko'],
]

# The navigation menu displayed at the top of each page.
let MENU = [
  ['Home', 'icon-home', '/'],
  ['Sponsor', 'icon-handshake-o', '/sponsors/'],
  ['Learn', 'icon-book', '/documentation/'],
  ['Packages', 'icon-archive', '/packages/'],
  ['Community', 'icon-users', '/community/'],
  ['News', 'icon-newspaper-o', '/news/']
]

fn filters -> Array[Filter] {
  [
    SyntaxHighlight.new as Filter,
    TableOfContents.new as Filter,
    Admonitions.new as Filter,
  ]
}

fn link(href: String, rel: String) -> html.Element {
  let el = html.Element.new('link')

  el.attr('rel', rel).attr('href', href)
  el
}

fn toggle_menu(query: String, open: String, close: String) -> html.Element {
  let a = html.Element.new('a')

  a.attr('data-toggle-text', close).attr('data-toggle', query).text(open)
  a
}

fn articles(files: ref Files) -> Result[Array[Page], String] {
  let pages =
    try files.matching('/news/*.md').try_reduce([]) fn (ary, path) {
      match Page.parse_file(files.source, path) {
        case Ok(page) -> {
          ary.push(page)
          Result.Ok(ary)
        }
        case Error(e) -> Result.Error(e.to_string)
      }
    }

  pages.sort_by fn (a, b) { b.date.cmp(a.date) }
  Result.Ok(pages)
}

fn container(
  body: mut html.Element,
  html_class: String,
  func: fn (mut html.Element),
) {
  body.div.attr('class', html_class).div.attr('class', 'grid').with(func)
}

fn head(page: ref Page) -> html.Element {
  let head = html.Element.new('head')

  head
    .meta
    .attr(
      'content',
      "\
        default-src 'self'; \
        script-src 'self'; \
        object-src 'none'; \
        style-src 'self'; \
        font-src 'self' data:; \
        img-src 'self' https://avatars.githubusercontent.com; \
        base-uri 'none'; \
        form-action 'none'; \
      "
    )
    .attr('http-equiv', 'Content-Security-Policy')

  head.meta.attr('charset', 'utf-8')
  head
    .meta
    .attr('name', 'google-site-verification')
    .attr('content', 'C0FiWgdONfvZffO-cciP2CZlMkDMCjfaQrcwPgLG_nw')

  head
    .meta
    .attr('name', 'viewport')
    .attr('content', 'width=device-width, initial-scale=1.0')

  head
    .link
    .attr('rel', 'alternate')
    .attr('href', '/feed.xml')
    .attr('type', 'application/atom+xml')
    .attr('title', TITLE)

  head
    .link
    .attr('rel', 'icon')
    .attr('href', '/favicon.ico')
    .attr('type', 'image/x-icon')

  head.script.attr('src', '/js/main.js').attr('defer', 'defer')

  head.add(link('/css/reset.css', rel: 'stylesheet'))
  head.add(link('/css/icons.css',  rel: 'stylesheet'))
  head.add(link('/css/main.css', rel: 'stylesheet'))
  head.add(link("{URL}{page.url}", rel: 'canonical'))
  head.title.text(page.title)
  head
}

fn header(page: ref Page) -> html.Element {
  let root = html.Element.new('div')

  root.attr('class', 'top-bar').header.attr('class', 'grid').with fn (h) {
    h.div.attr('class', 'logo').with fn (logo) {
      logo
        .img
        .attr('src', '/images/logo.png')
        .attr('height', '24')
        .attr('width', '24')

      logo.span.text('Inko')
    }

    h.div.attr('class', 'expand-menus').with fn (div) {
      div.add(toggle_menu('.top-bar nav', 'Show menu', 'Hide menu'))
    }

    h.nav.ul.with fn (ul) {
      MENU.iter.each fn (row) {
        ul.li.a.attr('href', row.get(2)).with fn (a) {
          a.i.attr('class', row.get(1))
          a.text(' ')
          a.text(row.get(0))
        }
      }
    }
  }

  root
}

fn content(body: mut html.Element, func: fn (mut html.Element)) {
  body.div.attr('class', 'row content').with(func)
}

fn corporate_sponsors(
  root: mut html.Element,
  sponsors: ref Array[CorporateSponsor],
) {
  root.h2.text('Organisations supporting Inko')
  root.table.attr('class', 'corporate-sponsors-table').with fn (table) {
    table.tbody.with fn (tbody) {
      sponsors.iter.each fn (sponsor) {
        tbody.tr.with fn (tr) {
          tr
            .td
            .attr('class', 'logo')
            .img
            .attr('src', sponsor.image)
            .attr('alt', sponsor.name)
            .attr('width', '150')
            .attr('height', '60')

          tr.td.append(sponsor.description.to_html)
        }
      }
    }
  }
}

fn github_sponsors(root: mut html.Element, sponsors: ref Array[Sponsor]) {
  root.h2.text('GitHub sponsors')
  root.table.attr('class', 'sponsors-table').with fn (table) {
    table.thead.tr.with fn (tr) {
      tr.th.attr('class', 'avatar')
      tr.th.text('Sponsor')
      tr.th.text('Amount per month')
      tr.th.text('Sponsor since')
    }

    table.tbody.with fn (tbody) {
      sponsors.iter.each fn (sponsor) {
        tbody.tr.with fn (tr) {
          tr.td.attr('class', 'avatar').with fn (td) {
            if sponsor.image.size > 0 {
              td
                .img
                .attr('src', sponsor.image)
                .attr('alt', sponsor.name)
                .attr('height', '32')
            }
          }

          tr.td.with fn (td) {
            if sponsor.website.size > 0 {
              td
                .a
                .attr('href', sponsor.website)
                .attr('rel', 'nofollow')
                .attr('title', sponsor.name)
                .text(sponsor.name)
            } else {
              td.text(sponsor.name)
            }
          }

          tr.td.text("${sponsor.amount}")
          tr.td.text(human_readable_date(sponsor.created_at))
        }
      }
    }
  }
}

fn package_list(root: mut html.Element, packages: ref Array[Package]) {
  root.div.attr('class', 'copy-notice admonition info').with fn (div) {
    div.div.attr('class', 'left').i.attr('class', 'icon')
    div
      .div
      .attr('class', 'text')
      .p
      .text('The command to install the package into your project has been copied to your clipboard.')
  }

  root.table.attr('class', 'packages-table').with fn (table) {
    table.thead.with fn (thead) {
      thead.tr.with fn (tr) {
        tr.th.text('Package')
        tr.th.text('License')
        tr.th.text('Stars')
        tr.th.text('Version')
        tr.th
      }
    }

    table.tbody.with fn (tbody) {
      packages.iter.each fn (pkg) {
        tbody.tr.with fn (tr) {
          tr.td.with fn (td) {
            td
              .a
              .attr('class', 'name')
              .attr('href', pkg.url)
              .attr('rel', 'nofollow')
              .attr('title', pkg.description)
              .text("{pkg.owner}/{pkg.name}")

            td.br
            td.text(pkg.description)
          }

          tr.td.with fn (td) {
            if packages.size > 0 {
              td
                .a
                .attr('title', pkg.license)
                .attr(
                  'href',
                  "https://choosealicense.com/licenses/{pkg.license.to_lower}"
                )
                .text(pkg.license)
            }
          }

          tr.td.text(pkg.stars.to_string)
          tr.td.text(pkg.version)
          tr.td.a.attr('href', '#').with fn (a) {
            a.i.attr('class', 'icon-clipboard')
            a
              .attr('class', 'button install-package')
              .attr(
                'data-copy',
                "inko pkg add github.com/{pkg.owner}/{pkg.name} {pkg.version} && inko pkg sync"
              )
              .attr('title', 'Click to copy the command to install this package')
              .text(' Install')
          }
        }
      }
    }
  }
}

fn pub home(files: ref Files, page: Page) -> Result[html.Document, String] {
  let examples = try Example.parse_all(files)
  let jumbo = try Page
    .parse_file(files.source, files.source.join('jumbotron.md'))
    .map_error fn (e) { "failed to parse jumbotron.md: {e}" }

  let doc = html.Document.html('en') fn (html) {
    html.add(head(page))
    html.body.with fn (body) {
      body.add(header(page))
      body.div.attr('class', 'jumbotron').div.attr('class', 'grid').with fn (d) {
        d.div.attr('class', 'introduction').with fn (d) {
          d.h1.text(jumbo.title)
          d.append(jumbo.to_html([]))

          BUTTONS.iter.each fn (btn) {
            let cls = "button {btn.get(2)}"

            d.a.attr('class', cls).attr('href', btn.get(3)).with fn (a) {
              a.i.attr('class', btn.get(1))
              a.text(' ')
              a.text(btn.get(0))
            }
          }
        }

        d.div.attr('class', 'code-examples').with fn (d) {
          d.select.attr('title', 'Choose an example to display').with fn (s) {
            examples.iter.each fn (ex) {
              s.option.attr('data-example', ex.title).text(ex.title)
            }
          }

          examples.iter.each fn (ex) {
            d
              .div
              .attr('class', 'example')
              .attr('data-example', ex.title)
              .append(ex.to_html)
          }
        }
      }

      container(body, 'page') fn (d) { d.append(page.to_html(filters)) }
    }
  }

  Result.Ok(doc)
}

fn pub page(page: Page) -> html.Document {
  let doc = html.Document.html('en') fn (html) {
    html.add(head(page))
    html.body.with fn (body) {
      body.add(header(page))
      container(body, 'page') fn (d) {
        d.article.with fn (article) {
          article.header.h1.text(page.title)
          article.append(page.to_html(filters))
        }
      }
    }
  }

  doc
}

fn pub sponsors(files: ref Files, page: Page) -> Result[html.Document, String] {
  let sponsors = try Sponsor
    .parse_all(files.source.join('data').join('sponsors.json'))
    .map_error fn (e) { e.to_string }

  let corporate = try CorporateSponsor
    .parse_all(files.source.join('data').join('corporate_sponsors.json'))
    .map_error fn (e) { e.to_string }

  let doc = html.Document.html('en') fn (html) {
    html.add(head(page))
    html.body.with fn (body) {
      body.add(header(page))
      container(body, 'page') fn (d) {
        d.article.with fn (article) {
          article.header.h1.text(page.title)
          article.append(page.to_html(filters))
          if corporate.size > 0 { corporate_sponsors(article, corporate) }
          if sponsors.size > 0 { github_sponsors(article, sponsors) }
        }
      }
    }
  }

  Result.Ok(doc)
}

fn pub packages(files: ref Files, page: Page) -> Result[html.Document, String] {
  let packages = try Package
    .parse_all(files.source.join('data').join('package_data.json'))
    .map_error fn (e) { e.to_string }

  let doc = html.Document.html('en') fn (html) {
    html.add(head(page))
    html.body.with fn (body) {
      body.add(header(page))
      container(body, 'page packages') fn (d) {
        d.article.with fn (article) {
          article.header.h1.text(page.title)

          if packages.empty? {
            article.p.text('No packages have been created yet :(')
          } else {
            package_list(article, packages)
          }

          article.append(page.to_html(filters))
        }
      }
    }
  }

  Result.Ok(doc)
}

fn pub news_index(files: ref Files, page: Page) -> Result[html.Document, String] {
  let news = try articles(files)
  let doc = html.Document.html('en') fn (html) {
    html.add(head(page))
    html.body.with fn (body) {
      body.add(header(page))
      container(body, 'page') fn (d) {
        d.article.with fn (article) {
          article.header.h1.text(page.title)
          article.table.attr('class', 'news-index').tbody.with fn (tbody) {
            news.iter.each fn (page) {
              tbody.tr.with fn (tr) {
                tr
                  .td
                  .attr('class', 'news-meta')
                  .time
                  .attr('datetime', iso_date(page.date))
                  .text(human_readable_date(page.date))

                tr
                  .td
                  .a
                  .attr('href', page.url)
                  .attr('title', page.title).text(page.title)
              }
            }
          }
        }
      }
    }
  }

  Result.Ok(doc)
}

fn pub news(page: Page) -> Result[html.Document, String] {
  let doc = html.Document.html('en') fn (html) {
    html.add(head(page))
    html.body.with fn (body) {
      body.add(header(page))
      container(body, 'page') fn (d) {
        d.article.attr('class', 'news-article').with fn (article) {
          article.header.with fn (h) {
            h.h1.text(page.title)
            h.p.attr('class', 'news-meta').with fn (p) {
              p.text('Published on ')
              p
                .time
                .attr('class', 'news-meta')
                .attr('datetime', iso_date(page.date))
                .text(human_readable_date(page.date))
            }
          }

          article.append(page.to_html(filters))
        }
      }
    }
  }

  Result.Ok(doc)
}

fn pub missing(page: Page) -> html.Document {
  html.Document.html('en') fn (html) {
    html.add(head(page))
    html.body.with fn (body) {
      body.add(header(page))
      container(body, 'missing-page') fn (div) {
        div.article.with fn (article) {
          article.header.with fn (h) {
            h.img.attr('src', '/images/404.gif').attr('height', '255')
            h.h1.text(page.title)
          }

          article.append(page.to_html(filters))
        }
      }
    }
  }
}

fn pub feed(files: ref Files) -> Result[String, String] {
  let articles = try articles(files)
  let doc = xml.Document.new

  doc.element('feed').attr('xmlns', 'http://www.w3.org/2005/Atom').with fn (f) {
    f.element('id').text("{URL}/")
    f.element('title').text(TITLE)

    match articles.opt(0) {
      case None -> {}
      case Some(article) -> f.element('updated').text(iso_date(article.date))
    }

    f.element('link').attr('href', URL).attr('rel', 'alternate')
    f.element('link').attr('href', "{URL}/feed.xml").attr('rel', 'self')
    f.element('author').with fn (a) {
      a.element('name').text(TITLE)
      a.element('uri').text(URL)
    }

    articles.iter.each fn (article) {
      f.element('entry').with fn (e) {
        let date = iso_date(article.date)
        let html = article.to_html(filters).to_string
        let url = "{URL}{article.url}"

        e.element('id').text(url)
        e.element('title').text(article.title)
        e.element('published').text(date)
        e.element('updated').text(date)
        e.element('link').attr('href', url).attr('rel', 'alternate')
        e.element('content').attr('type', 'html').text(html)
      }
    }
  }

  Result.Ok(doc.to_string)
}
