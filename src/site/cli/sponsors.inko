import site.github
import std.env
import std.fs.file (WriteOnlyFile)
import std.fs.path (Path)
import std.json (Json)
import std.time (DateTime)
import wobsite.time (iso_date)

let ENV = 'GITHUB_TOKEN'
let QUERY = '
  query($after: String) {
    user(login: "yorickpeterse") {
      sponsorshipsAsMaintainer(includePrivate: false, first: 100, after: $after) {
        pageInfo {
          hasNextPage
          endCursor
        }
        nodes {
          createdAt
          tier {
            monthlyPriceInDollars
          }
          sponsorEntity {
            ... on User {
              databaseId
              name
              avatarUrl
              websiteUrl
              url
            }
            ... on Organization {
              databaseId
              name
              avatarUrl
              websiteUrl
              url
            }
          }
        }
      }
    }
  }
'

fn sponsors(token: String) -> Result[Json, String] {
  let mut after = Option.None
  let rows = []

  loop {
    let vars = Map.new

    match after {
      case None -> {}
      case Some(v) -> vars.set('after', v)
    }

    let page = try github.get(QUERY, token, vars).map_error(fn (e) {
      e.to_string
    })
    let nodes = page
      .query
      .key('data')
      .key('user')
      .key('sponsorshipsAsMaintainer')
      .key('nodes')
      .as_array

    let vals = match nodes {
      case Some(v) -> v
      case _ -> break
    }

    try vals.iter.try_each(fn (val) {
      let date = match val.query.key('createdAt').as_string {
        case Some(v) -> v
        case _ -> throw 'the sponsorship creation date is invalid'
      }

      let amount = match
        val.query.key('tier').key('monthlyPriceInDollars').as_int
      {
        case Some(v) -> v
        case _ -> throw 'the tier price is invalid'
      }

      let name = match val.query.key('sponsorEntity').key('name').as_string {
        case Some(v) -> v
        case _ -> throw 'the sponsor name is invalid'
      }

      let image = match
        val.query.key('sponsorEntity').key('avatarUrl').as_string
      {
        case Some(v) -> '${v}&size=64'
        case _ -> throw 'the sponsor image URL is invalid'
      }

      let website = match
        val.query.key('sponsorEntity').key('websiteUrl').as_string.else(fn {
          val.query.key('sponsorEntity').key('url').as_string
        })
      {
        case Some(v) -> v
        case _ -> throw 'The sponsor website is invalid'
      }

      let row = Map.new

      row.set('name', Json.String(name))
      row.set('image', Json.String(image))
      row.set('website', Json.String(website))
      row.set('amount', Json.Int(amount))
      row.set('created_at', Json.String(date))
      rows.push(Json.Object(row))
      Result.Ok(nil)
    })

    let info = match
      page
        .query
        .key('data')
        .key('user')
        .key('sponsorshipsAsMaintainer')
        .key('pageInfo')
        .as_object
    {
      case Some(v) -> v
      case _ -> break
    }

    match info.opt('hasNextPage') {
      case Some(Bool(true)) -> {
        match info.opt('endCursor') {
          case Some(String(v)) -> after = Option.Some(v)
          case _ -> break
        }
      }
      case _ -> break
    }
  }

  let obj = Map.new

  obj.set('updated_at', Json.String(iso_date(DateTime.utc)))
  obj.set('sponsors', Json.Array(rows))
  Result.Ok(Json.Object(obj))
}

fn pub run {
  let token = match env.opt(ENV) {
    case Some(v) if v.size > 0 -> v
    case _ -> panic('the ${ENV} environment variable must be non-empty')
  }

  let rows = match sponsors(token) {
    case Ok(v) -> v
    case Error(e) -> panic('failed to get the sponsors data: ${e}')
  }

  let file = Path.new('source').join('data').join('sponsors.json')

  WriteOnlyFile
    .new(file)
    .then(fn (f) { f.write_string(rows.to_pretty_string) })
    .or_panic('failed to write the sponsors data')
}
