import std.fs.file (ReadOnlyFile)
import std.fs.path (Path)
import std.io (Buffer, Error)
import std.json (Json)
import std.string (ToString)
import std.time (DateTime)
import wobsite.time (parse_date)

fn string(value: ref Json, key: String) -> Result[String, ParseError] {
  match value.query.key(key).as_string {
    case Some(v) -> Result.Ok(v)
    case _ -> Result.Error(ParseError.InvalidKey(key))
  }
}

fn int(value: ref Json, key: String) -> Result[Int, ParseError] {
  match value.query.key(key).as_int {
    case Some(v) -> Result.Ok(v)
    case _ -> Result.Error(ParseError.InvalidKey(key))
  }
}

type enum ParseError {
  case Io(Error)
  case InvalidJson(String)
  case InvalidKey(String)
}

impl ToString for ParseError {
  fn pub to_string -> String {
    match self {
      case Io(e) -> 'failed to read the packages data: ${e}'
      case InvalidJson(e) -> 'failed to parse the packages JSON: ${e}'
      case InvalidKey(k) -> "the JSON key '${k}' is invalid or missing"
    }
  }
}

type Packages {
  let @packages: Array[Package]
  let @updated_at: DateTime

  fn static parse(path: ref Path) -> Result[Packages, ParseError] {
    let data = ByteArray.new

    try ReadOnlyFile
      .new(path.clone)
      .then(fn (f) { f.read_all(data) })
      .map_error(fn (e) { ParseError.Io(e) })

    let root = match Json.parse(Buffer.new(data)) {
      case Ok(Object(v)) -> v
      case Ok(_) -> {
        throw ParseError.InvalidJson('the top-level value must be an object')
      }
      case Error(e) -> throw ParseError.InvalidJson(e.to_string)
    }
    let updated_at = match root.remove('updated_at') {
      case Some(String(v)) -> {
        match parse_date(v) {
          case Some(v) -> v
          case _ -> {
            throw ParseError.InvalidJson('the "updated_at" date is invalid')
          }
        }
      }
      case _ -> throw ParseError.InvalidJson('the "updated_at" key is missing')
    }
    let raw_rows = match root.remove('packages') {
      case Some(Array(v)) -> v
      case _ -> throw ParseError.InvalidJson('the "packages" key is missing')
    }
    let rows = try raw_rows.into_iter.try_reduce([], fn (packages, val) {
      let owner = try string(val, 'owner')
      let name = try string(val, 'name')
      let url = try string(val, 'url')
      let desc = try string(val, 'description')
      let stars = try int(val, 'stars')
      let license = string(val, 'license').or('')
      let version = try string(val, 'version')

      packages.push(
        Package(
          owner: owner,
          name: name,
          url: url,
          description: desc,
          stars: stars,
          license: license,
          version: version,
        ),
      )
      Result.Ok(packages)
    })

    rows.sort_by(fn (a, b) { b.stars.cmp(a.stars) })
    Result.Ok(Packages(packages: rows, updated_at: updated_at))
  }
}

type Package {
  let @owner: String
  let @name: String
  let @url: String
  let @description: String
  let @stars: Int
  let @license: String
  let @version: String
}
