# Error handling
fn div(left: Int, right: Int) -> Result[Int, String] {
  # `throw x` is short for `return Result.Error(x)`,
  # saving us a bit of typing.
  if right == 0 { throw 'Attempt to divide by zero' }

  Result.Ok(left / right)
}

fn div2(left: Int, right: Int) -> Result[Int, String] {
  # `try` is short for matching against a value,
  # and throwing it again if it's an `Error`. It
  # also works for `Option` values, in which case
  # it throws a `None` if the value is also a
  # `None`.
  let res = try div(left, right)

  if res == 5 { Result.Ok(50) } else { Result.Ok(res) }
}

class async Main {
  fn async main {
    # `Result` is just an algebraic data type, so we can
    # pattern match against it to get the underlying
    # value.
    match div(10, 2) {
      case Ok(val) -> val
      case Error(err) -> panic(err)
    }

    # We can also just unwrap the Ok value if we're
    # certain we'll never get an `Error` case:
    div(10, 2).unwrap # => 5
  }
}
