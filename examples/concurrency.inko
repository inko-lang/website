# Concurrent programming
class async Calculator {
  fn async fact(size: Int, output: Channel[Int]) {
    let result = 1
      .to(size)
      .iter
      .reduce(1) fn (product, val) { product * val }

    output.send(result)
  }
}

class async Main {
  fn async main {
    let calc = Calculator {}
    let out = Channel.new(size: 1)

    # This calculates the factorial of 15 in the
    # background, then we wait for the result to
    # be sent back to us via a channel.
    calc.fact(15, out)
    out.receive # => 1307674368000
  }
}
